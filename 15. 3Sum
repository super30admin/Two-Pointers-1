Time complexity: O(n^2)
Space complexity: O(1)
Did this code successfully got submitted on leetcode: Yes

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> retList = new ArrayList<>();
        
        if(nums==null || nums.length==0)
            return retList;
        
        Arrays.sort(nums);
        
        for(int i=0;i<nums.length;i++){
            if(i>0 && nums[i]==nums[i-1])
                continue;
            
            int left=i+1;
            int right=nums.length-1;
            
            while(left<right){
                int currSum = nums[i]+nums[left]+nums[right];
                
                if(currSum==0){
                    List<Integer> list = new ArrayList<>();
                    list.add(nums[i]);
                    list.add(nums[left]);
                    list.add(nums[right]);
                    retList.add(list);
                    left++;
                    right--;
                    
                    while(left<right && nums[left]==nums[left-1]){
                        left++;
                    }
                    
                    while(left<right && nums[right]==nums[right+1]){
                        right--;
                    }
                }
                else if(currSum<0){
                    left++;
                }else{
                    right--;
                }
            }
        }
        return retList;
    }
}
