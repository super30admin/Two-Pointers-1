// Time Complexity :O(N * N)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :YES
// Any problem you faced while coding this :NO
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        //null
        if(nums==null || nums.length==0) return new ArrayList<>();
        List<List<Integer>> res=new ArrayList<>();
        Arrays.sort(nums);
        //int low; 
        int n=nums.length;
        for(int i=0;i<n-2;i++){
           if(nums[i]>0) break;
           if(i!=0 && nums[i]==nums[i-1]) continue;
            int low=i+1; 
            int high=n-1;
            while(low<high){
            int k=nums[i]+nums[low]+nums[high];
            if(k==0){
                List<Integer> temp=Arrays.asList(nums[i],nums[low],nums[high]);
                res.add(temp);
                low++;
                high--;
                while(low<high && nums[low]==nums[low-1]) low++;
                while(low<high && nums[high]==nums[high+1]) high--;
            }   
             else if(k>0)
                 high--;
            else
                   low++;
                
        }
        }
            return res;
              
        }
    }
    
    