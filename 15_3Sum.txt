// Time Complexity : o(n * n )
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
* Sort the array.
* for each number use twp ptr solution to find the other two numbers
* */

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for(int  i = 0; i< nums.length -2; i++){
            if(i>0 && nums[i] == nums[i-1]){
                continue;
            }
            int low = i+1;
            int high = nums.length -1;
            while(low<high){
                int sum = nums[i] + nums[low] + nums[high];
                if( sum == 0){
                    List<Integer> curr = Arrays.asList(nums[i], nums[low], nums[high]);
                    res.add(curr);
                    low++; high--;
                    while(low<high && nums[low] == nums[low-1]) low++;
                    while(low<high && nums[high] == nums[high+1]) high--;

                } else if(sum > 0){
                    high--;
                } else {
                    low++;
                }
            }
        }

        return res;
    }


}