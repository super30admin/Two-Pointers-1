from typing import List

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        """
                https://leetcode.com/problems/3sum/
                // Time Complexity : O(nlogn + n^2)
                // Space Complexity : O(n)
                            Sorting requires O(n) space
                // Did this code successfully run on Leetcode : Yes
                // Any problem you faced while coding this : No
                // Three line explanation of solution in plain english:
                     - Sort the array, as the array is sorted and we
                       are skipping the duplicates, we donot need to sort
                       the triplets again.
                     - For each element, find its corresponding pairs
                       using the high and low pointers
        """
        result = []
        if not nums or len(nums) < 3:
            return result

        nums.sort()

        # as triplet, iterate two elements less
        for i in range(len(nums) - 2):

            # as soon as we reach a positive number
            # as our target is 0 we are sure we cannot find
            # three numbers such that their sum is 0.
            if nums[i] > 0:
                break

            # i == 0 (edge case)
            # skip the duplicates nums as we need unique triplets.
            # if nums[i] == nums[i-1] the triplet generated by
            # nums[i] is same as nums[i-1]
            if i == 0 or nums[i] != nums[i - 1]:

                low = i + 1
                high = len(nums) - 1

                # for each element, find its corresponding triplet
                while low < high:
                    # we found a match
                    cur_sum = nums[i] + nums[low] + nums[high]
                    if cur_sum == 0:
                        result.append([nums[i], nums[low], nums[high]])

                        # need to change both pointers because we know that
                        # the sum of three numbers at this point is zero

                        # if we increase only the low pointer -
                        # the sum will now be greater than zero,
                        # as the list is sorted, we are moving towards a larger number

                        # if we decrease only the high pointer -
                        # the sum will now be lesser than zero,
                        # as the list is sorted, we are moving towards a smaller number

                        low += 1
                        high -= 1

                        # duplicates where we have pointers
                        # skip the duplicates
                        while low < high and nums[low] == nums[low - 1]: low += 1
                        while low < high and nums[high] == nums[high + 1]: high -= 1

                    # current sum is large, reduce high pointer
                    elif cur_sum > 0:
                        high -= 1
                    # current sum is lesser, increase low pointer
                    else:
                        low += 1
        return result

    def three_sum_brute_force(self, nums: List[int]) -> List[List[int]]:
        """
                // Time Complexity : O(n^3)
                // Space Complexity : O(nC3)
                    When all the numbers are unique triplets.
                    Using tuple as set does not support list for hashing.
        """
        if not nums or len(nums) < 3:
            return []

        result = set()
        for i in range(len(nums) - 2):
            # need to find two number such that their sum is a complement of nums[i]
            for j in range(i + 1, len(nums) - 1):
                for k in range(j + 1, len(nums)):
                    if (nums[j] + nums[k] + nums[i]) == 0:
                        result.add(tuple(sorted([nums[i], nums[j], nums[k]])))
        return list(result)


if __name__ == '__main__':
    h = Solution()
    print(h.threeSum([-1, 0, 1, 2, -1, -4]))
    print(h.threeSum([-2, 0, 0, 2, 2]))
    print(h.threeSum([0, 0, 0, 0]))
    print(h.threeSum([-1, -1, 2]))
    print(h.three_sum_brute_force([-1, 0, 1, 2, -1, -4]))
    print(h.three_sum_brute_force([-2, 0, 0, 2, 2]))
    print(h.three_sum_brute_force([0, 0, 0, 0]))
    print(h.three_sum_brute_force([-1, -1, 2]))
