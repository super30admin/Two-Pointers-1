// Time Complexity : O(N^2)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :  Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach: Idea is two use two pointer strategy and check if they sum upto 0. 
// 1st pointer is current element and other 2 are low and high

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        
        if(nums==null || nums.length==0){
            return result;
        }
        //Approach works only on sorted array
        Arrays.sort(nums);
        for(int i = 0 ; i < nums.length - 2 ; i++){                     
            if(i > 0 && nums[i] == nums[i-1]){    //IGnoring/Skipping Duplicate elements in array to have unique entries in result list
                continue;
            }
            
            int low = i+1;
            int high = nums.length-1;
            
            if(nums[i]>0){  //Elements already sorted so no poprobability of getting 0
                break;  
            }
            
            while(low < high){    
                int sum = nums[i] + nums[low] + nums[high];
                
                if(sum==0){
                    result.add(Arrays.asList(nums[i],nums[low],nums[high]));  //What else could we use instead of Arrays.asList()??
                    low++;    //Move LOW pointer
                    high--;   //Move HIGH pointer
                
                    while(low < high && nums[low]==nums[low - 1]){    //Again checking for duplicates after computation
                        low++;
                    }

                    while(low < high && nums[high]==nums[high+1]){    //Again checking for duplicates after computation
                        high--;
                    }

                }else if(sum < 0){
                    low++;
                }else{
                    high--;
                }
            }
        } 
        return result;
    }
}
