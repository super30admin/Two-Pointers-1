Time Complexity: O(n^2); first, array is sorted which is nlogn time. Next we iterate through the array and 
                          check for duplicates which is n^2 time. So, the time compl is n^2.
Space Comp: O(1)

class Solution {
	public List<List<Integer>> threeSum(int[] nums) {
		List<List<Integer>> result = new ArrayList<>();
		if(nums == null || nums.length < 3) return result;

		Arrays.sort(nums); // nlogn

		for(int i=0; i< nums.length-2; i++)
		{
			if(i > 0 && nums[i] == nums[i-1]) continue;
			int low = i+1; int high = nums.length-1;
			while(low < high)
			{
				int sum = nums[i] + nums[low] + nums[high];
				if(sum == 0)
				{
					result.add(Arrays.asList(nums[i],nums[low], nums[high])); 
					low++; high--;
					while(low< high && nums[low] == nums[low-1]) {low++;}
					while(low < high && nums[high] == nums[high+1]) {high--;}
				}
				else if(sum > 0) high--;
				else low++;

			}
		}

		return result;

	}
}
