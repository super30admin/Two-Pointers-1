class Solution{
	public List<List<Integer>> threeSum(int[] nums){
		
		if(nums == null || nums.length < 3)
			return new ArrayList<>();
			
		List<List<Integer>> output = new ArrayList<>();
		
		// Sorting
		Arrays.sort(nums);
		
		// We Iterate fixing I and Finding 2 Sum
		for(int i = 0; i < nums.length - 2; i++){
			if(i!= 0 && nums[i -1] == nums[i]){
				continue;
			}
			
			// Two sum
			int left = i + 1;
			int right = nums.length - 1;
			
			while(left < right){
				int sum = nums[i] + nums[left] + nums[right];
				
				if(sum == 0){
					output.add(Arrays.asList(nums[i], nums[left], nums[right]));
					left++;
					right--;
					
					while(left < right && nums[left - 1] == nums[left])
						left++;
						
					while(left < right && nums[right + 1] == nums[right])
						right--;
				}
				else if(sum < 0){
					left ++;
					while(left < right && nums[left - 1] == nums[left])
						left++;
				}
				else{
					right--;
					while(left < right && nums[right + 1] == nums[right])
						right--;
				}
			}
		}
		
		return output;
	}
}

// TC = O((n ^2)logn)
// SC = O(1)