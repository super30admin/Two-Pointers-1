class Solution {

    /**
     Possible solutions 
     BruteForce - Time Complexity O(n^3) Space Complexity O(1)
     Sort, iterate over first element and search for 2 sum - Time Complexity O(n^2logn) Space Complexity O(1)
     Hashset for storing 2 sum compliments - Time Complexity O(n^2) + nlogn = O(n^2) Space Complexity O(n)
     Two Pointers for 2 sum compliment - Time Complexity O(n^2) Space Complexity O(1)
     */
    public List<List<Integer>> threeSum(int[] nums) {
        
        Arrays.sort(nums);
        Set<List<Integer>> results = new HashSet<>();

        for (int i=0; i< nums.length-2; i++) {
            if (i == 0 || (i > 0 && nums[i] != nums[i-1])) {
                int low = i+1;
                int high = nums.length - 1;
                int compliment = 0-nums[i];

                while (low < high) {
                    if (nums[low] + nums[high] == compliment) {
                        results.add(List.of(nums[i], nums[low], nums[high]));

                        // handle duplicates without hashset
                        while (low < high && nums[low] == nums[low+1]) {
                            low++;
                        }
                        while (low < high && nums[high] == nums[high-1]) {
                            high--;
                        }
                        low++;
                        high--;
                    }
                    else if (nums[low] + nums[high] < compliment) {
                        low++;
                    } else {
                        high--;
                    }
                }
            }
        }
        return new ArrayList<>(results);
    }
}

