// Time Complexity : O(n^2) quadratic
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
edge case and n time complexity

// Your code here along with comments explaining your approach
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        List<List<Integer>> result = new ArrayList<>();
        
        if(nums.length < 2 || nums == null)
            return result;
        
        Arrays.sort(nums);
        for(int i=0; i<nums.length-2; i++)
        {
            
            int low = i+1, high = nums.length -1;
            
            if(i > 0 && nums[i] == nums[i-1])
                continue;
            
            
            while(low < high)
            {
                int sum = nums[i] + nums[low] + nums[high];
                if(sum == 0)
                {
                    result.add(Arrays.asList(nums[i], nums[low], nums[high]));
                    low++;
                    high--;
                    while(low < high && nums[low] == nums[low-1])
                    {
                        low++;
                    }
                    while(low < high && nums[high] == nums[high+1])
                    {
                        high--;
                    }
                }
                else if(sum < 0)
                {
                    low++;
                }
                else
                {
                    high--;
                }
            }
        }
        
      return result;  
    }
    
    public boolean checkSum (int[] nums, int p1, int p2, int p3)
    {
        if(nums[p1]+nums[p2]+nums[p3] == 0)
            return true;
        else
            return false;
    }
}
