// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approachclass Solution {
    public void sortColors(int[] nums) {
        
        if(nums==null||nums.length==0)
            return; 
        
        //low = red index= white, high = blue pointer
        int low=0,index=0,high=nums.length-1;
        
        while (index<=high)
            if(nums[index]==0) // when the pointer is at red point
            {
                int temp=nums[index];
                nums[index]=nums[low];
                nums[low]=temp;
                low++;
                index++;
                
            }
        //when the pointer is at blue point
            else if (nums[index]==2)
             {
                int temp=nums[index];
                nums[index]=nums[high];
                nums[high]=temp;
                high--;
            
             }
        //when the pointer is in middle, we do not need to swap elements
            else
            {
                index++;
            }
        
    }
}