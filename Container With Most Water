// Time Complexity : check below
// Space Complexity :check below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution 1 - 
Brute force - TC - O(n ^ 2) SC - O(1)

    public int maxArea(int[] height) {
        int max = 0;
        
        for(int i = 0; i < height.length; i++)
        {
            for(int j = i + 1; j < height.length; j++)
            {
                int h = Math.min(height[i], height[j]);
                int w = (j - i);
                max = Math.max(max, w * h);
            }
        }
        return max;
    }
    
 Solution 2 - 
 Two pointers - TC - O(n)  SC - O(1)
 
 public int maxArea(int[] height) {
        int max = 0;
        
        int low = 0, high = height.length - 1;
        while(low < high)
        {
            int h = Math.min(height[low], height[high]);
            int w = (high - low);
            max = Math.max(max, w * h);
            
            if(height[low] < height[high])
            {
                low ++;
            }
            else
            {
                high--;
            }
        }
        
        return max;
    }
