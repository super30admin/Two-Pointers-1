// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Yes, had a difficult time getting the idea


// Your code here along with comments explaining your approach : Dutch flag algorithm. Three pointers : low, mid, high for the numbers 0,1 and 2. If you find a 0 increment mid and low after swapping mid and low, 3 then swap it with mid and decrement high, 1 then increment mid.

class Solution {
    public void sortColors(int[] nums) {
        int low=0;
        int mid=0;
        int high=nums.length-1;
        while(mid<=high){
            if(nums[mid]==1)
                mid++;
            else if(nums[mid]==2){
                swap(nums,mid,high);
                high--;
            }
            else{
                swap(nums,low,mid); low++; mid++;
            }
        }
    }
    public void swap(int nums[],int a,int b){
        int temp=nums[a];
        nums[a]=nums[b];
        nums[b]=temp;
        
    }
}