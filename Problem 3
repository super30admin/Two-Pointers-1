# TC: O(n)
# SC: O(1)
# Approach: The algorithm uses a two-pointer approach starting from both ends of the array, calculating the area between the lines and moving the pointers towards each other while updating the maximum area until they meet.

class Solution:
    def maxArea(self, height: List[int]) -> int:
        max_area = 0
        left, right = 0, len(height) - 1

        while left < right:
            h = min(height[left], height[right])
            w = right - left
            max_area = max(max_area, h * w)

            if height[left] < height[right]:
                left += 1
            else:
                right -= 1

        return max_area
