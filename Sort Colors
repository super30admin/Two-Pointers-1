// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :  Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach: Idea is to use two pointer strategy and swap larger elements to end and smaller to front.
// Hint: Initialize start and mid at 0.

SOLUTION: 
class Solution {
    public void sortColors(int[] nums) {
        if(nums==null || nums.length==0){
            return;
        }        
        int low = 0; int mid = 0; int high = nums.length-1;
 
        while(mid <= high){
            if(nums[mid]==0){               
                swap(low,mid,nums);
                low++;
                mid++;
            }else if(nums[mid]==1){
                mid++;
            }else{
                swap(mid,high,nums);
                high--;
            }
        }
    }
    
    private static void swap(int i, int j, int[] nums){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
