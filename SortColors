/*
TC: O(N)
SC: O(1)
//thought process: we need to segregate colors to their appropriate position.
We know that out 0 will in leftmost position, 1 will be in middle and 2 will be in rightmost;
So keep the pointers as intended. Swap if 2 is appearing before its position. Keep middle pointer as slow pointer
and if 0 intends to be in higher position than 2 then again swap it.
 */

class SortColors{

    public void sortColors(int[] nums) {

        int low = 0, mid = 0, high = nums.length-1;
        while(low <= high){
            if (nums[low] == 0){
                swap(nums,low++,mid++);
            }
            else if(nums[low] == 2){
                swap(nums,low,high--);
            }
            else{
                low++;
            }
        }
    }

    private void swap(int[] nums,int low,int high){
        int temp = nums[low];
        nums[low] = nums[high];
        nums[high] = temp;
    }

}